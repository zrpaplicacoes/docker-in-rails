#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'colorize'

IMAGE = 'zrpaplicacoes/docker-in-rails'
LATEST_VERSION = '3.1.0'
VERSIONS = ['3.1.0', '2.7.5', '2.6.3', '2.5.1', '2.5.0', '2.4.3', '2.4.2', '2.4.1', '2.2.10', '2.2.7', '2.1.10']

def dockerfile(version)
  "ruby:#{version}-alpine.Dockerfile"
end

def tag(version, user_tag)
  semver = version.split "."
  major = semver[0].to_i;
  minor = semver[1].to_i;
  patch = semver[2].to_i;

  "#{IMAGE}:#{version}"
end

def build(ruby_version, tag, opts = {})
  puts "Building #{tag(ruby_version, tag)} image..."
  build_config = ['docker', 'build', opts[:quiet] ? '-q' : '',
                  '-f', dockerfile(ruby_version),
                  '-t', tag(ruby_version, tag), '.']

  build_config = build_config.reject(&:empty?)

  if system(*build_config)
    puts "Successfully built #{tag(ruby_version, tag)}".colorize(:green)
  else
    puts "Error while building #{tag(ruby_version, tag)}".colorize(:red)
    exit(0)
  end

  if ruby_version.match(LATEST_VERSION)
    tag = ruby_version.match('dev') ? 'dev' : 'latest'
    system('docker', 'tag', tag(ruby_version, tag), "#{IMAGE}:#{tag}")
  end
end

# Parse user params
config = {}

OptionParser.new do |opt|
  opt.on('-a', '--all', 'Build all images') { |v| config[:all] = v }
  opt.on('-r', '--ruby RUBY_VERSION', 'Ruby Version') { |o| config[:ruby_version] = o }
  opt.on('-t', '--tag TAG', 'Tag') { |o| config[:tag] = o }
end.parse!

config[:tag] ||= 'nightly'

# Build the image
if config[:all]
  puts "WARN - Ignoring provided ruby version #{config[:ruby_version]}".colorize(:red) if config[:ruby_version]
  VERSIONS.each do |ruby_version|
    build(ruby_version, config[:tag], quiet: true)
    puts "\n" unless ruby_version == VERSIONS.last
  end
else
  config[:ruby_version] ||= LATEST_VERSION
  build(config[:ruby_version], config[:tag])
end
